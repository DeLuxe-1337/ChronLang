IR.Write.For :: (context) {
    indexVariable = context["index"]

    IR.Writer.WriteLine("for(int " + IR.Read(indexVariable) + " = " + context["start"] + ";" + IR.Read(indexVariable) + " < " + context["end"] + ";" + IR.Read(indexVariable) + "++)")

    IR.Writer.WriteLine("{")
    IR.Env.Scope.Create()
    IR.Env.Defer.Create()

    // Write block
    IR.Write(context["block"])

    IR.Env.Defer.VisitCurrentScope()
    IR.Env.Scope.Pop()
    IR.Env.Defer.Pop()
}

IR.CreateFor :: (index, start, end, block) {
    return <"type"="For", "index"=index, "start"=Clone(start), "end"=Clone(end), "block"=Clone(block)>
}