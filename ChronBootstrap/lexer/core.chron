include lexer.token
include lexer.state

Lexer.SymbolMap = <"("="LPAREN", ")"="RPAREN", "{"="LBRACKET", "}"="RBRACKET">

Lexer.GetToken :: (state) {
    while ((String.IsWhitespace(Lexer.State.Get(state))) or (Lexer.State.Get(state) == "\n")) and (Lexer.State.EOF(state) == false) {
        Lexer.State.IncreaseIndex(state)
    }

    if String.IsAlpha(Lexer.State.Get(state)) and (Lexer.State.EOF(state) == false) {
        identifier = ""
        while (String.IsAlphaNumeric(Lexer.State.Get(state)) or (Lexer.State.Get(state) == ".")) and (Lexer.State.EOF(state) == false) {
            identifier += Lexer.State.Get(state)
            Lexer.State.IncreaseIndex(state)
        }
        return Lexer.Token.Create(Clone(identifier), "IDENTIFIER")
    }

    if String.IsNumeric(Lexer.State.Get(state)) and (Lexer.State.EOF(state) == false) {
        number = ""
        while (String.IsNumeric(Lexer.State.Get(state))) and (Lexer.State.EOF(state) == false) {
            number += Lexer.State.Get(state)
            Lexer.State.IncreaseIndex(state)
        }
        return Lexer.Token.Create(Clone(number), "NUMBER")
    }

    if Lexer.State.Get(state) == "\"" and (Lexer.State.EOF(state) == false) {
        string = ""

        Lexer.State.IncreaseIndex(state)

        while Lexer.State.Get(state) != "\"" and (Lexer.State.EOF(state) == false) {
            string += Lexer.State.Get(state)
            Lexer.State.IncreaseIndex(state)
        }
        
        Lexer.State.IncreaseIndex(state)
        
        return Lexer.Token.Create(Clone(string), "STRING")
    }

    if Lexer.State.Get(state) == ":" and (Lexer.State.EOF(state) == false) {
        Lexer.State.IncreaseIndex(state)
        if(Lexer.State.Get(state) == ":") {
            Lexer.State.IncreaseIndex(state)
            return Lexer.Token.Create("::", "CONSTANT")
        }
        else {
            return Lexer.Token.Create(":", "COLON")
        }
    }

    foreach symbol, type in Table.Iter(Lexer.SymbolMap) {
        if Lexer.State.Get(state) == symbol {
            Lexer.State.IncreaseIndex(state)
            return Lexer.Token.Create(Clone(symbol), Clone(type))
        }
    }

    if (Lexer.State.EOF(state) == false) {
        PrintLn("Unmatched character (" + Lexer.State.Get(state) + ") skipping...")
        Lexer.State.IncreaseIndex(state)
    }

    return nil
}

Lexer.GetAllTokens :: (state) {
    tokens = <>

    while Lexer.State.EOF(state) == false {
        result = Lexer.GetToken(state)
        if result != nil {
            tokens[Table.SizeOf(tokens)] = result
        }
    }

    return Clone(tokens)
}