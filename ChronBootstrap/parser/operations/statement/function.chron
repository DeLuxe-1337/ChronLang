Parser.Statement.Function :: (state) {
    OverrideName = false

    Modifiers = Parser.Statement.Modifier(state)

    PrintLn(Modifiers)

    if Parser.State.Match(Parser.State.Get(state), "EXCLAMATION", nil) {
        OverrideName = true
        Parser.State.IncreaseIndex(state)
    }

    if Parser.State.Match(Parser.State.Get(state), "IDENTIFIER", nil) and Parser.State.Match(Parser.State.Peek(state, 1), "CONSTANT", nil) {
        name = Parser.State.GetAndIncrease(state)["value"]

        Parser.State.Expect(state, "CONSTANT", nil, "Expected '::'")

        parameters = <>
        parameter_index = 0
        if Parser.State.Match(Parser.State.Get(state), "LPAREN", nil) {
            Parser.State.Expect(state, "LPAREN", nil, "Expected '('")
            
            while Parser.State.Get(state)["type"] != "RPAREN" {
                if parameter_index > 0 {
                    Parser.State.Expect(state, "COMMA", nil, "Expected ','")
                }

                ident = Parser.State.Get(state)

                if Parser.State.Expect(state, "IDENTIFIER", nil, "Expected IDENTIFIER in function parameters") {
                    parameters[parameter_index] = ident["value"]
                    parameter_index += 1
                }
            }

            Parser.State.Expect(state, "RPAREN", nil, "Expected ')'")
        }

        block = Parser.Statement.Block(state)
        if block != nil {
            function = IR.CreateFunction(name, block, parameters)
            function["overrideName"] = OverrideName

            if Modifiers["name"] != nil {
                function["scopeName"] = Modifiers["name"]
            }

            if Modifiers["inline"] != nil {
                function["inline"] = true
            }

            if Modifiers["extern"] != nil {
                function["extern"] = true
            }

            return Clone(function)
        }
    }
    return nil
}