Parser.Expression.Factor :: (state) {
    if Parser.State.MatchAny(state, <"LPAREN">) {
        result = Parser.Expression(state)

        Parser.State.Expect(state, "RPAREN", nil, "Expected ')' after '('")
        
        return Clone(result)
    }

    return Parser.Expression.Unary(state)
}

Parser.Expression.Term :: (state) {
    left = Parser.Expression.Factor(state)

    while Parser.State.MatchAny(state, <"STAR", "FSLASH", "PERCENT">) {
        operator = Parser.State.Previous(state)["type"]
        right = Parser.Expression.Factor(state)

        if operator == "PERCENT" {
            left = IR.CreateMod(left, right)
        } else {
            if operator == "STAR" {
                left = IR.CreateMult(left, right)
            } else {
                left = IR.CreateDiv(left, right)
            }
        }
    }

    return Clone(left)
}

Parser.Expression.Summand :: (state) {
    left = Parser.Expression.Term(state)

    while Parser.State.MatchAny(state, <"PLUS", "MINUS">) {
        operator = Parser.State.Previous(state)["type"]
        right = Parser.Expression.Term(state)

        if operator == "PLUS" {
            left = IR.CreateAdd(left, right)
        } else {
            left = IR.CreateSub(left, right)
        }
    }

    return Clone(left)
}