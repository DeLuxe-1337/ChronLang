include parser.state

Parser.Statement.Include :: (state) {
    if Parser.State.Match(Parser.State.Get(state), "IDENTIFIER", "include") and Parser.State.Match(Parser.State.Peek(state, 1), "IDENTIFIER", nil) {
        path = Parser.State.Next(state)["value"]
        PrintLn("Include path: " + path)

        Parser.State.IncreaseIndex(state)

        PrintLn("Include stmt valid")
    }
    return nil
}

Parser.Statement.Function :: (state) {
    if Parser.State.Match(Parser.State.Get(state), "IDENTIFIER", nil) and Parser.State.Match(Parser.State.Peek(state, 1), "CONSTANT", nil) {
        name = Parser.State.Get(state)["value"]

        PrintLn("Function: " + name)

        Parser.State.IncreaseIndex(state)
        Parser.State.IncreaseIndex(state)

        PrintLn("Function stmt valid")
    }
    return nil
}

Parser.Statement.Invoke :: (state) {
    if Parser.State.Match(Parser.State.Get(state), "IDENTIFIER", nil) and Parser.State.Match(Parser.State.Peek(state, 1), "LPAREN", nil) {
        name = Parser.State.Get(state)["value"]
        Parser.State.IncreaseIndex(state)

        while Parser.State.Peek(state, 1)["type"] != "RPAREN" {
            Parser.State.IncreaseIndex(state)
        }

        PrintLn("Invoke: " + name)

        PrintLn("Invoke stmt valid")
    }
    return nil
}

Parser.Statement.Block :: (state) {
    if Parser.State.Match(Parser.State.Get(state), "LBRACKET", nil) {
        Parser.State.IncreaseIndex(state)
        while Parser.State.Peek(state, 1)["type"] != "RBRACKET" {
            PrintLn("Block: " + ToString(Parser.Statement(state)))
            Parser.State.IncreaseIndex(state)
        }
        PrintLn("Block stmt valid")
    }
    return nil
}

Parser.Statement :: (state) {
    stmt = Parser.Statement.Include(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Function(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Invoke(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Block(state)
    if stmt != nil { return stmt }

    return nil
}