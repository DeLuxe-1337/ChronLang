WriteMap = <
    "Function"=IR.Write.Function, 
    "Block"=IR.Write.Block, 
    "Invoke"=IR.Write.Invoke, 
    "EnvironmentAccessor"=IR.Write.EnvironmentAccessor, 
    "Defer"=IR.Write.Defer,
    "Release"=IR.Write.Release,
    "Return"=IR.Write.Return,
    "If"=IR.Write.If,
    "ScopedBlock"=IR.Write.ScopedBlock,
    "TempVariable"=IR.Write.TempVariable
>
ReadMap = <
    "Literals.String"=IR.Read.Literals.String, 
    "Literals.Number"=IR.Read.Literals.Number, 
    "Literals.Boolean"=IR.Read.Literals.Boolean,
    "Literals.Nil"=IR.Read.Literals.Nil,
    "Literals.RawText"=IR.Read.Literals.RawText, 
    "Invoke"=IR.Read.Invoke, 
    "EnvironmentAccessor"=IR.Read.EnvironmentAccessor, 
    "Function"=IR.Read.Function,
    "Release"=IR.Read.Release,
    "TempVariable"=IR.Read.TempVariable,
    "Math.Add"=IR.Read.Math.Add,
    "Math.Sub"=IR.Read.Math.Sub,
    "Math.Mult"=IR.Read.Math.Mult,
    "Math.Div"=IR.Read.Math.Div,
    "Math.Mod"=IR.Read.Math.Mod,
    "Comparison.Equal"=IR.Read.Comparison.Equal,
    "Comparison.NotEqual"=IR.Read.Comparison.NotEqual,
    "Comparison.Greater"=IR.Read.Comparison.Greater,
    "Comparison.GreaterThanEq"=IR.Read.Comparison.GreaterThanEq,
    "Comparison.Less"=IR.Read.Comparison.Less,
    "Comparison.LessThanEq"=IR.Read.Comparison.LessThanEq,
    "Comparison.Or"=IR.Read.Comparison.Or,
    "Comparison.And"=IR.Read.Comparison.And,
    "Comparison.Not"=IR.Read.Comparison.Not
>

IR.Write :: (node) {
    type = Clone(node["type"])
    visiter = Clone(WriteMap[type])
    
    invoke IR.Write visiter(node)
}

IR.Read :: (node) {
    type = Clone(node["type"])
    visiter = Clone(ReadMap[type])
    
    return invoke IR.Read visiter(node)
}