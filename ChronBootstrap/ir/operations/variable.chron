IR.Variable.Globals = <>

IR.Write.Variable :: (context) {
    expression = Clone(IR.Read(Clone(context["child"])))
    varName = Clone(context["name"])
    accessorName = Clone(context["accessorName"])

    if IR.Env.Scope.CurrentIndex == 0 {
        Table.Insert(IR.Variable.Globals, context)
        IR.Writer.WriteLine("void* " + accessorName + ";")
        IR.Env.Scope.Add(varName, context, true)
        return
    }

    if IR.Env.Scope.GetFirst(varName) == nil {
        IR.Writer.WriteLine("void* " + accessorName + " = " + expression + ";")
        IR.Env.Scope.Add(varName, Clone(context), true)
        IR.Env.Defer.Push(
            IR.CreateDefer(
                IR.CreateRelease(context)
            )
        )
    } else {
        IR.Writer.WriteLine(accessorName + " = " + expression + ";")
    }
}

IR.Variable.WriteGlobals :: {
    IR.Writer.WriteLine("void __InitializeGlobals() {")
    IR.Env.Scope.Create()
    foreach index, value in Table.Iter(IR.Variable.Globals) {
        IR.Write(value)
    }
    IR.Env.Scope.Pop()
    IR.Writer.WriteLine("}")

    return "__InitializeGlobals();"
}

IR.Read.Variable :: (context) {
    return Clone(context["accessorName"])
}

IR.CreateVariable :: (name, expression) {
    newName = "_V_" + name
    return <"type"="Variable", "accessorName"=Clone(newName), "name"=Clone(name), "child"=Clone(expression)>
}