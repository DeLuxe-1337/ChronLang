IR.Write.Invoke :: (context) {
    IR.Env.Defer.Create()
    IR.Writer.WriteLine(IR.Read.Invoke(context) + ";")
    IR.Env.Defer.VisitCurrentScope()
    IR.Env.Defer.Pop()
}

IR.Invoke.ConditionalAutoRelease :: (context) {
    if context["target"]["type"] == "EnvironmentAccessor" {
        envValue = IR.EnvironmentAccessor.Get(context["target"])
        if envValue["native"] == true {
            return false
        }
    }

    return true
}

IR.Read.Invoke :: (context) {
    parameters = Clone(context["parameters"])
    target = Clone(context["target"])

    invokeBuild = ""

    invokeBuild += IR.Read(target) + "("

    build = ""

    if parameters != nil {
        foreach index, value in Table.Iter(parameters) {
            if value["autoRelease"] == true {
                if value["conditionalAutoRelease"] != nil {
                    if invoke IR.Invoke.ConditionalAutoRelease value["conditionalAutoRelease"](value) {
                        build += IR.Read(IR.CreateRelease(value))
                    } else {
                        build += IR.Read(value)
                    }
                } else {
                    build += IR.Read(IR.CreateRelease(value))
                }
            } else {
                build += IR.Read(value)
            }
            if index != (Table.SizeOf(parameters) - 1) {
                build += ","
            }
        }
    }

    invokeBuild += build + ")"

    return Clone(invokeBuild)
}

IR.CreateInvoke :: (callee, parameters) {
    return <"target"=Clone(callee), "parameters"=Clone(parameters), "autoRelease"=true, "conditionalAutoRelease"=IR.Invoke.ConditionalAutoRelease, "type"="Invoke">
}