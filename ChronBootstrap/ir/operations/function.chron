IR.Write.Function :: (context) {
    name = Clone(context["name"])
    scopeName = Clone(context["scopeName"])
    block = Clone(context["block"])
    parameters = Clone(context["parameters"])
    doesReturn = Clone(context["return"])
    accessorName = name

    if context["overrideName"] == false {
        accessorName = "_F_" + name
    }

    if name == "Main" {
        accessorName = "main"
    }

    if doesReturn == false {
        IR.Writer.Write(Types.Void)
    } else {
        IR.Writer.Write(Types.Object)
    }

    IR.Writer.Write(" " + accessorName + "(")

    context["block"] = nil

    IR.Env.Scope.Add(scopeName, context, true)
    IR.Env.Scope.Create()

    if parameters != nil {
        build = ""
        foreach index, value in Table.Iter(parameters) {
            build += Types.Object + " " + value
            if index != (Table.SizeOf(parameters) - 1) {
                build += ","
            }
        }
        IR.Writer.Write(build)
    }

    IR.Writer.Write(")")

    IR.Writer.WriteLine("{")

    IR.Write(block)

    IR.Env.Scope.Pop()
    IR.Writer.WriteLine("}")
}

IR.Read.Function :: (context) { 
    return "_F_" + Clone(context["name"])
}

IR.CreateFunction :: (name, block, parameters) {
    return <"name"=Clone(name), "scopeName"=Clone(name), "parameters"=Clone(parameters), "block"=Clone(block), "return"=false, "overrideName"=false, "type"="Function">
}