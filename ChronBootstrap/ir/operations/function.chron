IR.Write.Function :: (context) {
    name = Clone(context["name"])
    block = Clone(context["block"])
    parameters = Clone(context["parameters"])
    doesReturn = Clone(context["return"])
    
    accessorName = "_F_" + name

    if doesReturn == true {
        IR.Writer.Write(Types.Void)
    } else {
        IR.Writer.Write(Types.Object)
    }

    IR.Writer.Write(" " + accessorName + "(")

    IR.Env.Scope.Add(name, context, true)
    IR.Env.Scope.Create()

    if parameters != nil {
        build = ""
        foreach index, value in Table.Iter(parameters) {
            build += Types.Object + " " + value
            if index != (Table.SizeOf(parameters) - 1) {
                build += ","
            }
        }
        IR.Writer.Write(build)
    }

    IR.Writer.Write(")")

    IR.Writer.WriteLine("{")

    IR.Write(block)

    IR.Env.Scope.Pop()
    IR.Writer.WriteLine("}")
}

IR.CreateFunction :: (name, block, parameters) {
    return <"name"=name, "parameters"=parameters, "block"=block, "return"=false, "type"="Function">
}