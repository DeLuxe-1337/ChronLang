emit_c `
ChronVoid Chron_WriteFile(ChronObject o1, ChronObject o2) {
	FILE *file = fopen(c_string(o1), "w");
	fprintf(file, "%s", c_string(o2));
	fclose(file);
}
`

emit_c `
#define CHUNK_SIZE 1024
ChronObject Chron_ReadFile(ChronObject o1) {
    FILE *file = fopen(c_string(o1), "r");
    char *buffer;
    long file_size;
    size_t total_bytes_read = 0;

    if (file == NULL) {
        return DynNil();
    }
    
    // Get the file size
    fseek(file, 0, SEEK_END);
    file_size = ftell(file);
    fseek(file, 0, SEEK_SET);
    
    // Allocate memory for the buffer
    buffer = (char *)malloc(file_size);
    if (buffer == NULL) {
        fclose(file);
        return DynNil();
    }

    // Read the file in chunks until the end
    while (!feof(file)) {
        size_t bytes_to_read = (file_size - total_bytes_read > CHUNK_SIZE) ? CHUNK_SIZE : (file_size - total_bytes_read);
        size_t bytes_read = fread(buffer + total_bytes_read, 1, bytes_to_read, file);
        total_bytes_read += bytes_read;
    }
    buffer[total_bytes_read] = '\0'; // Null-terminate the buffer

    ChronObject result = DynString(buffer);

    free(buffer);
    fclose(file);

    return result;
}
`

emit_c `
    ChronObject Chron_CreateFile(ChronObject path, ChronObject mode) {
        FILE *file = fopen(c_string(path), c_string(mode));
        return DynPointer(file);
    }
`

emit_c `
    void Chron_WriteStringToFile(ChronObject fileObject, ChronObject text) {
        FILE *file = (FILE*)c_pointer(fileObject);
        fprintf(file, "%s", c_string(text));
    }
`

emit_c `
    void Chron_CloseFile(ChronObject fileObject) {
        FILE *file = (FILE*)c_pointer(fileObject);
        fclose(file);
    }
`

emit_c `
ChronObject Chron_FileExists(ChronObject path) {
    FILE* file = fopen(c_string(path), "r");
    if(file != NULL) {
        fclose(file);
        return DynBoolean(true);
    }

    return DynBoolean(false);
}
`

emit_c `
ChronObject Chron_FileRemove(ChronObject path) {
    if(remove(c_string(path)) == 0) {
        return DynBoolean(true);
    }

    return DynBoolean(false);
}
`

["name"="File.WriteStringToFile"]
!Chron_WriteStringToFile :: (file, content) ?

["return", "name"="File.Create"]
!Chron_CreateFile :: (path, mode) ?

["name"="File.Close"]
!Chron_CloseFile :: (file) ?

["name"="File.Write"]
!Chron_WriteFile :: (path, content) ?

["return", "name"="File.Read"]
!Chron_ReadFile :: (path) ?

["return", "name"="File.Exists"]
!Chron_FileExists :: (path) ?

["return", "name"="File.Remove"]
!Chron_FileRemove :: (path) ?