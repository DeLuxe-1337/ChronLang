include parser.operations.expression.identifier
include parser.operations.expression.string
include parser.operations.expression.number
include parser.operations.expression.boolean
include parser.operations.expression.nil
include parser.operations.expression.release
include parser.operations.expression.math
include parser.operations.expression.comparison
include parser.operations.expression.unary
include parser.operations.expression.table
include parser.operations.expression.invoke
include parser.operations.expression.type
include parser.operations.expression.cast
include parser.operations.expression.new
include parser.operations.emit_c

Parser.Expression.Primary :: (state) {
    expr = Parser.Expression.String(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.Number(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.Boolean(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.Nil(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.Identifier(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.Cast(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.New(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.Table(state)
    if expr != nil { return expr } 

    expr = Parser.Expression.Release(state)
    if expr != nil { return expr }

    expr = Parser.Expression.Invoke(state)
    if expr != nil { return expr }

    expr = Parser.Emit_C(state)
    if expr != nil { return expr }

    while Parser.State.MatchAny(state, {"LPAREN"}) {
        expr = Parser.Expression(state)

        Parser.State.Expect(state, "RPAREN", nil, "Expected ')' after '('")
        
        expr = IR.CreateGrouping(expr)
    }
    if expr != nil { return expr } 

    return nil
}

Parser.Expression :: (state) {
    expr = Parser.Expression.ComparisonLogical(state)
    if expr != nil { return expr } 

    return nil
}