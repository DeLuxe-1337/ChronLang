Parser.Statement.Function :: (state) {
    OverrideName = false

    Modifiers = Parser.Statement.Modifier(state)

    if Parser.State.Match(Parser.State.Get(state), "EXCLAMATION", nil) {
        OverrideName = true
        Parser.State.Expect(state, "EXCLAMATION", nil, "Expected '!'")
    }

    if Parser.State.Match(Parser.State.Get(state), "IDENTIFIER", nil) and Parser.State.Match(Parser.State.Peek(state, 1), "CONSTANT", nil) {
        name = Parser.State.GetAndIncrease(state)["value"]

        Parser.State.Expect(state, "CONSTANT", nil, "Expected '::'")

        parameters = {}
        parameter_index = 0
        if Parser.State.Match(Parser.State.Get(state), "LPAREN", nil) {
            Parser.State.Expect(state, "LPAREN", nil, "Expected '('")
            
            while Parser.State.Get(state)["type"] != "RPAREN" {
                if parameter_index > 0 {
                    Parser.State.Expect(state, "COMMA", nil, "Expected ','")
                }

                ident = Parser.State.Get(state)

                if Parser.State.Expect(state, "IDENTIFIER", nil, "Expected IDENTIFIER in function parameters") {
                    if Parser.State.Match(Parser.State.Get(state), "COLON", nil) {
                        Parser.State.Expect(state, "COLON", nil, "Expected ';'")

                        typeIdentifier = Parser.State.ExpectRet(state, "IDENTIFIER", nil, "Expected IDENTIFIER for function parameter type")
                        parameters[parameter_index] = {"value"=ident["value"], "type"=typeIdentifier["value"]}
                    } else {
                        parameters[parameter_index] = ident["value"]
                    }
                    parameter_index += 1
                }
            }

            Parser.State.Expect(state, "RPAREN", nil, "Expected ')'")
        }

        block = Parser.Statement.Block(state)
        function = IR.CreateFunction(name, block, parameters)

        function["overrideName"] = OverrideName

        if Modifiers["name"] != nil {
            function["scopeName"] = Modifiers["name"]
        }

        if Modifiers["inline"] != nil {
            function["inline"] = true
        }

        if Modifiers["extern"] != nil {
            function["extern"] = true
        }

        if Modifiers["native"] != nil {
            function["native"] = true
            function["nativeReturn"] = "void"
            function["nativeParameters"] = ""

            if Modifiers["return"] != nil {
                function["nativeReturn"] = Modifiers["return"]
            }

            if Modifiers["parameters"] != nil {
                function["nativeParameters"] = Modifiers["parameters"]
            }
        }

        if Modifiers["return"] != nil {
            function["return"] = true
        }
    
        if block == nil {
            Parser.State.Expect(state, "QUESTION", nil, "Expected '?' or a block after function decl.")
        }

        return Clone(function)
    }
    return nil
}