include parser.operations.statement.include
include parser.operations.statement.block
include parser.operations.statement.struct
include parser.operations.statement.function
include parser.operations.statement.modifier
include parser.operations.statement.defer
include parser.operations.statement.release
include parser.operations.statement.return
include parser.operations.statement.if
include parser.operations.statement.continue
include parser.operations.statement.break
include parser.operations.statement.variable
include parser.operations.statement.while
include parser.operations.statement.for
include parser.operations.statement.foreach
include parser.operations.emit_c

Parser.Statement :: (state) {
    stmt = Parser.Statement.Include(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Struct(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Function(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Block(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Defer(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Release(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Return(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Break(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Continue(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.If(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.While(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.For(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.ForEach(state)
    if stmt != nil { return stmt }

    stmt = Parser.Emit_C(state)
    if stmt != nil { return stmt }

    stmt = Parser.Statement.Variable(state)
    if stmt != nil { return stmt }

    return nil
}