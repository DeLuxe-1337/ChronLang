Parser.Statement.Struct :: (state) {
    if Parser.State.Match(Parser.State.Get(state), "IDENTIFIER", nil) and 
            Parser.State.Match(Parser.State.Peek(state, 1), "CONSTANT", nil) and 
            Parser.State.Match(Parser.State.Peek(state, 2), "STRUCT", nil) {

        name = Parser.State.GetAndIncrease(state)["value"]

        Parser.State.Expect(state, "CONSTANT", nil, "Expected '::'")
        Parser.State.Expect(state, "STRUCT", nil, "Expected 'struct'")

        parameters = {}
        parameter_index = 0
        if Parser.State.Match(Parser.State.Get(state), "LPAREN", nil) {
            Parser.State.Expect(state, "LPAREN", nil, "Expected '('")
            
            while Parser.State.Get(state)["type"] != "RPAREN" {
                if parameter_index > 0 {
                    Parser.State.Expect(state, "COMMA", nil, "Expected ','")
                }

                ident = Parser.State.Get(state)

                if Parser.State.Expect(state, "IDENTIFIER", nil, "Expected IDENTIFIER in function parameters") {
                    typeDef = Parser.Expression.Type(state)
                    if typeDef != nil {
                        parameters[parameter_index] = {"value"=ident["value"], "type"=typeDef}
                    } else {
                        parameters[parameter_index] = ident["value"]
                    }
                    parameter_index += 1
                }
            }

            Parser.State.Expect(state, "RPAREN", nil, "Expected ')'")
        }

        return IR.CreateStruct(name, parameters)
    }
    return nil
}