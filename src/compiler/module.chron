include lexer.core
include parser.core
include ir.all

Compiler.Module.Statements = {}
Compiler.Module.StatementCount = 0
Compiler.Module.Compiled = {}

Compiler.Module.IsCompiled :: (path) {
    return Compiler.Module.Compiled[path] != nil
}

Compiler.Module.Create :: (name) {
    return {"name"=name}
}

Compiler.Module.FileFetch :: (file) {
    if File.Exists(file) {
        return file
    }

    RootPath = (LaunchParameters[0]) + "/../";
    RootFile = RootPath + file;
    if File.Exists(RootFile) {
        return RootFile
    }

    Throw(file + " could not find file to include")

    return nil
}

Compiler.Module.CompileFromFile :: (file) {
    if Compiler.Module.IsCompiled(file) {
        PrintLn(file + " is already included")
        return false
    }

    filePath = Compiler.Module.FileFetch(file)

    PrintLn("->Lexer:")

    lexerState = Lexer.State.Create(File.Read(filePath))

    tokens = Lexer.GetAllTokens(lexerState)
    // PrintLn(tokens)

    PrintLn("->Parser:")

    parserState = Parser.State.Create(tokens)

    Compiler.Module.Statements[Compiler.Module.StatementCount] = Parser.ParseAllStatements(parserState)
    Compiler.Module.StatementCount += 1

    Compiler.Module.Compiled[file] = true

    return true
}

Compiler.Module.WriteStatementsToFile :: (module) {
    PrintLn("->IR:")
    IR.Writer.Create(module["name"] + ".chron.c")
    PrintLn("File created")

    IR.WriteModule()

    IR.Env.Scope.Create()

    PrintLn("Forward declare")
    foreach statementIndex, statementTable in Table.Iter(Compiler.Module.Statements)  {
        foreach index, statement in Table.Iter(statementTable) {
            if statement["type"] == "Function" {
                IR.Function.ForwardDeclare(statement)
            }
        }
    }

    PrintLn("Writing all statements in root")
    foreach statementIndex, statementTable in Table.Iter(Compiler.Module.Statements)  {
        foreach index, statement in Table.Iter(statementTable) {
            IR.Write(statement)
        }
    }

    PrintLn("Closing file")

    IR.Writer.Close()
}