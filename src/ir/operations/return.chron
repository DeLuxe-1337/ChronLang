IR.Write.Return :: (context) {
    expression = context["expression"]
    IR.Env.Defer.RemoveIf(Clone(expression))
    
    if expression != nil {
        tmpReturn = IR.CreateTempVariable("RETURN_TEMP", expression)
        IR.Write(tmpReturn)

        IR.Env.Defer.VisitCurrentScopeWithPop()

        IR.Writer.WriteLine("return " + IR.Read(tmpReturn) + ";")
    } else {
        IR.Env.Defer.VisitCurrentScopeWithPop()

        IR.Writer.WriteLine("return;")
    }
}

IR.CreateReturn :: (child) {
    return {"type"="Return", "expression"=child}
}