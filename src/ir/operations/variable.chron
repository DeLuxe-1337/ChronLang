IR.Variable.Globals = {}

IR.Variable.VariableRead :: (context) {return nil}
IR.Variable.VariableCreatedRef :: (context, variable) ?

IR.Write.Variable :: (context) {
    expression = context["expression"]
    target = context["target"]
    varName = context["name"]
    accessorName = context["accessorName"]

    type = "void*"

    if context["typeDef"] != nil {
        type = IR.Read(context["typeDef"])
    }

    if IR.Env.Scope.CurrentIndex == 0 { // Global because it's not in any scopes
        Table.Insert(IR.Variable.Globals, context)
        IR.Writer.WriteLine(type + " " + accessorName + ";")
        IR.Env.Scope.Add(varName, context, true)
        return
    }

    if target["VariableWrite"] != nil {
        invoke IR.Variable.VariableCreatedRef target["VariableWrite"](target, expression)

        if expression["VariableCreatedRef"] != nil {
            invoke IR.Variable.VariableCreatedRef expression["VariableCreatedRef"](expression, context)
        }
        
        return
    }

    if IR.Env.Scope.GetFirst(varName) == nil {
        IR.Writer.WriteLine(type + " " + accessorName + " = " + IR.Read(expression) + ";")
        if (context["autoReleaseExpression"] == true) and (expression["autoRelease"] == true) {
            context["deferIndex"] = IR.Env.Defer.Push(
                context
            )
        }
        IR.Env.Scope.Add(varName, context, true)
    } else {
        variable = IR.Env.Scope.GetFirst(varName)
        if (variable["expression"])["autoRelease"] == true {
            tmpVariable = IR.CreateTempVariable("VARIABLE_ASSIGN_TEMP", expression)
            IR.Write(tmpVariable)
            IR.Write(IR.CreateRelease(context))
            IR.Writer.WriteLine(accessorName + " = " + IR.Read(tmpVariable) + ";")
        } else {
            IR.Writer.WriteLine(accessorName + " = " + IR.Read(expression) + ";")
        }
    }

    if expression["VariableCreatedRef"] != nil {
        invoke IR.Variable.VariableCreatedRef expression["VariableCreatedRef"](expression, context)
    }
}

IR.Variable.WriteInitializeGlobals :: {
    IR.Writer.WriteLine("void __InitializeGlobals() {")
    IR.Env.Scope.Create()
    foreach index, value in Table.Iter(IR.Variable.Globals) {
        IR.Write(value)
    }
    IR.Env.Scope.Pop()
    IR.Writer.WriteLine("}")

    return "__InitializeGlobals();"
}

IR.Variable.WriteReleaseGlobals :: {
    IR.Writer.WriteLine("void __ReleaseGlobals() {")
    IR.Env.Scope.Create()
    foreach index, value in Table.Iter(IR.Variable.Globals) {
        IR.Write(IR.CreateRelease(value))
    }
    IR.Env.Scope.Pop()
    IR.Writer.WriteLine("}")

    return "__ReleaseGlobals();"
}

IR.Read.Variable :: (context) {
    target = context["target"]

    if target["VariableRead"] != nil {
        return invoke IR.Variable.VariableRead target["VariableRead"](context["expression"])
    }

    return Clone(context["accessorName"])
}

IR.Variable.Defer :: (context) {
    IR.Write(IR.CreateRelease(context))
}

IR.CreateVariable :: (target, expression) {
    name = "ERROR_NAME_NOT_VALID"

    if target["type"] == "EnvironmentAccessor" {
        name = target["value"]
    }

    if TypeOf(target) == "string" {
        name = target
    }

    newName = "_V_" + String.Replace(name, ".", "_")
    return {"type"="Variable", "accessorName"=newName, "name"=name, "target"=target, "expression"=expression, "autoReleaseExpression"=true, "defer"=IR.Variable.Defer}
}