IR.Function.Signatures = {}

IR.Write.Function :: (context) {
    name = Clone(context["name"])
    block = Clone(context["block"])
    accessorName = Clone(context["accessorName"])
    parameters = Clone(context["parameters"])

    context["block"] = nil

    if (context["entrypoint"] == true) and (context["native"] == true)  {
        context["globalFunction"] = IR.Variable.WriteInitializeGlobals()
        context["globalReleaseFunction"] = IR.Variable.WriteReleaseGlobals()
    }

    IR.Env.Scope.Create()
    IR.Env.Defer.Create()

    foreach index, param in Table.Iter(parameters) {
        IR.Env.Scope.Add(param, IR.CreateRawText(param), true)
    }
    
    IR.Writer.WriteLine(IR.Function.GenerateFunctionHeader(context))

    if block != nil {
        IR.Writer.WriteLine("{")

        if context["globalFunction"] != nil {
            IR.Writer.WriteLine(context["globalFunction"])
        }

        IR.Write(block)

        if context["globalReleaseFunction"] != nil {
            IR.Writer.WriteLine(context["globalReleaseFunction"])
        }

        IR.Env.Defer.VisitCurrentScopeWithPop()
        IR.Writer.WriteLine("}")
    } else {
        IR.Writer.WriteLine(";")
    }

    IR.Env.Scope.Pop()
    IR.Env.Defer.Pop()

    if (context["entrypoint"] == true) and (context["native"] != true) {
        globalInitializeFunction = IR.Variable.WriteInitializeGlobals()
        globalReleaseFunction = IR.Variable.WriteReleaseGlobals()

        IR.Writer.WriteLine("int main(int argc, char* argv[]) { ")
        
        IR.Writer.WriteLine(globalInitializeFunction)

        if Compiler.Module.IsCompiled("core/parameters.chron") {
            IR.Writer.WriteLine("SetLaunchParameters(argc, argv);")
        }

        IR.Writer.WriteLine("_main();")
        
        IR.Writer.WriteLine(globalReleaseFunction)
        
        IR.Writer.WriteLine("return 0; }")
    }
}

IR.Function.GenerateParameters :: (context) {
    if context["native"] == true {
        return Clone(context["nativeParameters"])
    }

    parameters = Clone(context["parameters"])

    if parameters != nil {
        build = ""
        foreach index, value in Table.Iter(parameters) {
            build += (Types.Object + " " + value)
            if index != (Table.SizeOf(parameters) - 1) {
                build += ","
            }
        }
        return Clone(build)
    }

    return nil
}

IR.Function.GenerateReturn :: (context) {
    if context["native"] == true {
        return Clone(context["nativeReturn"])
    }

    if context["return"] == false {
        return Clone(Types.Void)
    } 

    return Clone(Types.Object)
}

IR.Function.GenerateFunctionSignature :: (name, context) {
    return "typedef " + IR.Function.GenerateReturn(context) + " (*" + name + ")(" + IR.Function.GenerateParameters(context) + ");"
}

IR.Function.GenerateFunctionHeader :: (context) {
    name = context["name"]
    accessorName = context["accessorName"]

    build = ""

    if context["extern"] == true {
        build += "extern "
    }

    if context["inline"] == true {
        build += "inline "
    }

    build += IR.Function.GenerateReturn(context)

    build += (" " + accessorName + "(")

    parameters = IR.Function.GenerateParameters(context)
    if parameters != nil {
        build += parameters
    }

    build += ")"

    return Clone(build)
}

IR.Function.ForwardDeclare :: (context) {
    scopeName = Clone(context["scopeName"])
    name = context["name"]
    accessorName = Clone(name)

    // begin Format C name
    if ((context["overrideName"] == false) and (context["native"] != true)) {
        accessorName = "_F_" + String.Replace(name, ".", "_")
    }

    if (name == "Main") or (name == "main") {
        accessorName = "main"
        context["entrypoint"] = true
    }

    if (context["entrypoint"] == true) and (context["native"] != true) {
        accessorName = "_main"
    }

    context["accessorName"] = accessorName
    // end

    signatureName = accessorName + "Sig"

    // Forward declare the sig and function
    sig = IR.Function.GenerateFunctionSignature(signatureName, context)
    IR.Writer.WriteLine(sig)
    IR.Writer.WriteLine(IR.Function.GenerateFunctionHeader(context) + ";")

    // Add the signature to a table
    IR.Env.Scope.Add(scopeName, context, true)
    IR.Function.Signatures[scopeName] = signatureName
    // PrintLn(IR.Function.Signatures[scopeName])
}

IR.Read.Function :: (context) {
    invokeParameters = {IR.CreateRawText(context["accessorName"])}
    invokeCreateFunction = IR.CreateInvoke(Functions.CreateFunction, invokeParameters)

    return IR.Read(invokeCreateFunction)
}

IR.Invokable.Function :: (context) {
    return Clone(context["accessorName"])
}

IR.CreateFunction :: (name, block, parameters) {
    doesReturn = false
    if block["containsReturnStatement"] == true {
        doesReturn = true
    }
    return {"name"=name, "scopeName"=name, "parameters"=parameters, "block"=block, "return"=doesReturn, "overrideName"=false, "type"="Function"}
}

IR.CreateFunctionRaw :: (name, returnValue) {
    return {"name"=name, "accessorName"=name, "scopeName"=name, "parameters"=nil, "block"=nil, "return"=returnValue, "overrideName"=true, "type"="Function"}
}